@using Model;
@{
    ViewBag.Title = "Index";
}
<link rel="stylesheet" type="text/css" href="~/Content/css/Produce/ProductScheduling.css" />
@*<script src="~/Scripts/Product/ProductScheduling.js" type="text/javascript"></script>*@

<!--style-->
<style type="text/css">
    .input
    {
        width:44px;
        height:16px;
        border:1px solid #95B8E7;
    }
    .readonly
    {
        background-color:#999999;
    }
    .btnDisabled
    {
     background-color:gray;
        width:25px;
        height:25px;
        border-style:outset;
        border-radius: 5px; background:white;
    }
</style>
<!--treegrid低层支撑-->
<script>
    var curSlcRow;//当前选中行
    var curID = 0;//当前行ID：从1开始
    var curClientOrderID = "";//保存当前客户订单号
    var curOrderDetail = "";//保存当前客户订单详细
    var curProductID = "";//产品ID
    var curMatID = "";//保存当前按钮点击的物料行的MatID
    var curSpecification = "";//当前物料规格
    var curWhID = "";//当前对应仓库编号
    var dataRows = 0;//数据的总行数
    var lastProduct = "";//mouseenter事件触发前的产品名

    var IsPartUpdate = false;//是否是局部更新:平时保持为false,只有在局部更新时打开为true，在更新完之后立马恢复为false
    var isNextStep = false;//是否点击了下一步

    var tableID = "#treegrid";

    function DateAdd(sdate, days) {
        var a = new Date(sdate);
        a = a.valueOf();
        a = a + days * 24 * 60 * 60 * 1000;
        a = new Date(a);
        return a.valueOf();
    }
    //日期天数增加:传入字符串，返回字符串
    function addday(dt, days) {
        var t1 = new Date(new Date(dt).valueOf() + days * 24 * 60 * 60 * 1000);// 日期加上指定的天数
        return t1.getFullYear() + "-" + (t1.getMonth() + 1) + "-" + t1.getDate();
    }

    //获取选中行的主键字段值
    var getRowKeys = function (rowIndex) {
        //取得的数据还是LoadedData！！！
        $("#treegrid").treegrid("selectRow", rowIndex);
        curSlcRow = $("#treegrid").treegrid("getSelected");//这两步可以优化，
        curID = curSlcRow.id;
        curClientOrderID = curSlcRow.ClientOrderID;
        curOrderDetail = curSlcRow.ClientOrderDetail;
        curProductID = curSlcRow.ProductID;
        curMatID = curSlcRow.MaterialID;
        curSpecification = curSlcRow.MaterialSpecification;
        curWhID = curSlcRow.WhID;
        //console.info(curSlcRow);
    }
    //恢复界面原先的数据，不从后台取
    function reloadRow(rowIndex) {
        IsPartUpdate = true;//打开局部更新
        $(tableID).treegrid("updateRow",
            {
                index: rowIndex,
                row: {}
            });
        IsPartUpdate = false;//关闭局部更新
        mergeCellsForTree();
    }
    //更新一行数据：会更新loadedData
    function updateRow(rowIndex, rowAndValue) {
        IsPartUpdate = true;//打开局部更新
        $(tableID).treegrid("updateRow",
            {
                index: rowIndex,
                row: rowAndValue
            });
        IsPartUpdate = false;//关闭局部更新
        mergeCellsForTree();
        console.info(dataRows);
    }

    //用subData来更新表格中指定的行列：针对性不强，带来性能损失，将进一步拆分，或加入解析行为
    function updateRows(subData) {
        IsPartUpdate = true;//打开局部更新
        for (var i = 0; i < subData.length; i++) {
            console.info(subData[i]);
            $(tableID).treegrid("updateRow",
                {
                    index: subData[i].id,
                    row: {
                        DemondQuantityFloor: subData[i].DemondQuantityFloor,
                        DemondQuantityCeiling: subData[i].DemondQuantityFloor,
                        NormalInLock: subData[i].NormalInLock,
                        TotalDemondQuantity: subData[i].TotalDemondQuantity,
                        ProvideDate: subData[i].ProvideDate,
                        StartDate: subData[i].StartDate,
                        strProvideDate: subData[i].strProvideDate,
                        strStartDate: subData[i].strStartDate,
                        AbnormalInLock: subData[i].AbnormalInLock//单配

                    }
                });
        }
        IsPartUpdate = false;//关闭局部更新
        mergeCellsForTree();
    }

    //启动编辑
    function beginEdit() {
        var editableTxtDoc = $(".lastStep");
        editableTxtDoc.removeAttr("readonly");
        editableTxtDoc.css("background-color", "#ffffff");
        //按钮可用
        var btnDoc = $(".columnButton");
        btnDoc.removeAttr("disabled");

    }

    //结束编辑
    function endEdit() {
        var editableTxtDoc = $(".lastStep");
        editableTxtDoc.css("background-color", "#999999");
        editableTxtDoc.attr("readOnly", "true");
        //按钮不可用
        var btnDoc = $(".columnButton");
        btnDoc.attr("disabled", "disabled");
    }

    //预计时间
    var PptDays = function (rowIndex, id) {
        getRowKeys(rowIndex);
        if (parseInt(curSlcRow.StandPreparationPeriod) < parseInt($("#" + id).val())) {
            reloadRow(rowIndex);
            $.messager.alert("禁止操作", "第" + rowIndex + "行的计划备料工期大于实际备料工期！");
        } else {
            //获得后代行数
            var cldIDs = GetChildIdAsIntArr(rowIndex, curSlcRow._parentId);
            var childRowsData = [];
            var subData = GetData();
            if (cldIDs.length > 1) {
                //计算时间差：旧值-新值
                var offsetDate = curSlcRow.PreparationPeriod - parseInt($("#" + id).val());
                for (var j = 1; j < cldIDs.length; j++) {
                    var subId = cldIDs[j] - 1;
                    subData[subId].StartDate = DateAdd(DtToString(subData[subId].StartDate), offsetDate);
                    subData[subId].strStartDate = DtToString(subData[subId].StartDate);
                    subData[subId].ProvideDate = DateAdd(DtToString(subData[subId].ProvideDate), offsetDate);
                    subData[subId].strProvideDate = DtToString(subData[subId].ProvideDate);
                    childRowsData.push(subData[subId]);
                }
            }
            var subId = cldIDs[0] - 1;
            subData[subId].StartDate = DateAdd(DtToString(subData[subId].ProvideDate), -parseInt($("#" + id).val()));
            subData[subId].strStartDate = DtToString(subData[subId].StartDate);
            subData[subId].PreparationPeriod = parseInt($("#" + id).val());
            childRowsData.push(subData[subId]);

            updateRows(childRowsData);
        }
        endEdit();
    }

    //获取当前页面treegrid中的数据：会展开其中的树，组成平级结构
    var GetData = function () {
        var rootList = $("#treegrid").treegrid("getData");
        if (rootList.length == dataRows) {
            return rootList.sort(function (a, b) { return a.id - b.id });
        }
        var matList = rootList;
        for (var i = 0; i < rootList.length; i++) {
            if (rootList[i].children != null) {
                //展开树根
                var subNodes = $("#treegrid").treegrid("getChildren", rootList[i].id);
                for (var j = 0; j < subNodes.length; j++) {
                    matList.push(subNodes[j]);
                }
            }
        }
        return matList.sort(function (a, b) { return a.id - b.id });
    }

    //获取某一节点及其后代序号
    var GetChildIds = function (rowIndex, parRowID) {
        var idList = rowIndex;
        var subData = GetData();
        //首节点
        if (rowIndex == 1) {
            for (var i = 1; i < subData.length; i++) {
                idList += "," + subData[i].id;
            }
        } else {
            //存在于树干中
            if (parRowID != 0) {
                for (var i = 0; i < subData.length; i++) {
                    if (subData[i]._parentId == parRowID && subData[i].id > rowIndex) {
                        //idList.push(subData[i].id);
                        idList += "," + subData[i].id;
                    }
                }
            }
                //是树根
            else {
                for (var i = 0; i < subData.length; i++) {
                    if (subData[i]._parentId == rowIndex && subData[i].id > rowIndex) {
                        //idList.push(subData[i].id);
                        idList += "," + subData[i].id;
                    }
                }
            }
        }
        console.info(idList);//显示影响行
        return idList;

    }
    //获取某一节点及其后代序号的整型数组形式
    var GetChildIdAsIntArr = function (rowIndex, parRowID) {
        var idList = [rowIndex];
        var subData = GetData();
        //首节点
        if (rowIndex == 1) {
            for (var i = 1; i < subData.length; i++) {
                idList.push(subData[i].id);
            }
        } else {
            //存在于树干中
            if (parRowID != 0) {
                for (var i = 0; i < subData.length; i++) {
                    if (subData[i]._parentId == parRowID && subData[i].id > rowIndex) {
                        idList.push(subData[i].id);
                    }
                }
            }
                //是树根
            else {
                for (var i = 0; i < subData.length; i++) {
                    if (subData[i]._parentId == rowIndex && subData[i].id > rowIndex) {
                        idList.push(subData[i].id);
                    }
                }
            }
        }
        //console.info(idList);//显示影响行
        return idList;
    }

    //当前数据是否已符合排产要求
    var BoolInfCheck = function () {
        var matList = GetData();
        for (var i = 0; i < matList.length; i++) {
            if (matList[i].ProduceQuantity + matList[i].PurchQuantity + matList[i].AssistQuantity < matList[i].TotalDemondQuantity) {
                $.messager.alert("第" + matList[i].id + "行 数据不合法", "投料明细数量合计没有达到投料合计需求量！");
                return false;
            }
            if (matList[i].NormalInLock + matList[i].AbnormalInLock + matList[i].ProduceQuantity + matList[i].PurchQuantity + matList[i].AssistQuantity > matList[i].DemondQuantityCeiling) {
                $.messager.alert("第" + matList[i].id + "行 数据不合法", "锁库与投料合计大于物料需求量上限！");
                return false;
            }
        }
        return true;
    }

    //自产、外购、外协界面上数据的改变
    var CommisonReserve = function (rowIndex, id) {
        //合法检测
        getRowKeys(rowIndex);
        var strUpdate;
        var totCommissionNum = 0;
        if ("prdQtt" + rowIndex == id) {
            totCommissionNum = parseFloat($("#" + id).val()) + curSlcRow.PurchQuantity + curSlcRow.AssistQuantity;
            strUpdate = { ProduceQuantity: parseFloat($("#" + id).val()) };
        } else if ("pchQtt" + rowIndex == id) {
            totCommissionNum = parseFloat($("#" + id).val()) + curSlcRow.ProduceQuantity + curSlcRow.AssistQuantity;
            strUpdate = { PurchQuantity: parseFloat($("#" + id).val()) };
        } else {
            totCommissionNum = parseFloat($("#" + id).val()) + curSlcRow.PurchQuantity + curSlcRow.ProduceQuantity;
            strUpdate = { AssistQuantity: parseFloat($("#" + id).val()) };
        }

        if (totCommissionNum > curSlcRow.TotalDemondQuantity + curSlcRow.DemondQuantityCeiling - curSlcRow.DemondQuantityFloor) {
            reloadRow(rowIndex);//恢复原数据
            $.messager.alert("禁止操作", "不合法：第" + rowIndex + "行中 自产+外协+外购 的数量和大于投料小计数量！");
        } else {
            try {
                //如果是购买投料发生变化:更新其后代
                if ("pchQtt" + rowIndex == id) {
                    //获得后代行数
                    var cldIDs = GetChildIdAsIntArr(rowIndex, curSlcRow._parentId);
                    if (cldIDs.length <= 1) {
                        return false;//没有后代，返回
                    }
                    //计算差值：新值-旧值
                    var offsetNum = parseFloat($("#" + id).val()) - curSlcRow.PurchQuantity;
                    var childRowsData = [];
                    //后代的上限，下限，投料小计发生变化
                    var subData = GetData();
                    for (var j = 1; j < cldIDs.length; j++) {
                        var subId = cldIDs[j] - 1;
                        if (subId != cldIDs[j-1] ) {
                            throw new Error("目标的子零件顺序号不连续，可能的原因是初次排产后，此产品的技术结构又进行了修改！");
                        }
                        console.info(subId);
                        subData[subId].DemondQuantityCeiling -= offsetNum * subData[subId].ConstituteQuantity;
                        subData[subId].DemondQuantityFloor -= offsetNum * subData[subId].ConstituteQuantity;
                        subData[subId].TotalDemondQuantity -= offsetNum * subData[subId].ConstituteQuantity;
                        childRowsData.push(subData[subId]);
                    }
                    console.info(childRowsData);
                    updateRows(childRowsData);
                }
                updateRow(rowIndex, strUpdate);
            } catch (e) {
                $.messager.alert("拒绝操作", e.message);
                reloadRow(rowIndex);
            }
            

        }
    }

    //合并效果
    function mergeCellsForTree() {
        //拉伸首行
        $("#expandCell").parents("td").attr("rowspan", dataRows);
        //隐藏其余行
        $(".be-merge-cell").closest("td").attr("style", "display:none;");
    }

    //表头
    var createColumnForTreeGrid = function () {
        var _columns = [
           [
               { field: 'id', title: '结点序列', rowspan: 2, width: 0, hidden: true },//行序号[同时为treegrid的idField]
               { field: '_parentId', title: '指向结点', rowspan: 2, width: 0, hidden: true },//指向序号[同时为treegrid的idField]
               { field: 'ClientOrderID', title: '客户订单号', rowspan: 2, width: 0, hidden: true },//永久隐藏列，订单号
               { field: 'ClientOrderDetail', title: '订单明细', rowspan: 2, width: 0, hidden: true },//永久隐藏列，订单明细
               { field: 'ProductID', title: '产品ID', rowspan: 2, width: 0, hidden: true },//永久隐藏列，产品ID
               {
                   field: 'ProductType', title: '产品型号', rowspan: 2, width: 150, align: 'center',
                   formatter: function (val, row, index) {
                       if (IsPartUpdate == false) {
                           dataRows = dataRows + 1;//在reload时应当将此属性清0
                           if (row.id == 1) {//首行拉伸
                               return "<span class='" + val + "' id='expandCell'>" + val + "</span>";
                           }
                       } else {
                           if (row.id == 1) {
                               return "<span class='" + val + "' id='expandCell'>" + val + "</span>";
                           }
                       }
                       return "<span class='be-merge-cell'>" + val + "</span>";
                   }
               },

               { field: 'MaterialID', title: '物料编号', rowspan: 2, width: 0, hidden: true }, //永久隐藏列，物料编号
               { field: 'WhID', title: '仓库编号', rowspan: 2, width: 0, hidden: true }, //永久隐藏列，物料编号
               { field: 'MaterialName', title: '物料名称', rowspan: 2, align: 'left', width: 200 },
               { field: 'MaterialSpecification', title: '材料及规格要求', rowspan: 2, align: 'center', width: 120, formatter: function (val, row, index) { return "<span class='" + row.MaterialID + "'>" + val + "</span>" } },
               { field: 'SpecificationBtn', title: '', rowspan: 2, width: 30, align: "center", formatter: function (val, row, index) { return '<button type="button" class="columnButton ' + row.MaterialID + '-Button" onclick=specifySpecification(' + row.id + ',"' + row.MaterialID + '")></button>' } },

               { field: 'ConstituteQuantity', title: '数量', rowspan: 2, align: 'center', width: 60 },
               { field: '', title: '计划需求数量', colspan: 2, align: 'center', width: 120 },
               { field: '', title: '库存数量', colspan: 4, align: 'center', width: 200 },
               { field: '', title: '锁库数量', colspan: 2, align: 'center', width: 60 },
               { field: 'TotalDemondQuantity', title: '投料小计', rowspan: 2, align: 'center', width: 80 },
               { field: '', title: '投料明细', colspan: 3, align: 'center', width: 60 },
               //-----------------以下开始隐藏
               { field: 'strProvideDate', title: '提供日期', rowspan: 2, align: 'center', width: 100, hidden: true },
               { field: 'ProvideDate', title: '提供日期', rowspan: 2, align: 'center', width: 100, hidden: true, formatter: function (val, row, index) { return DtToString(val) } },
               { field: 'ProcessName', title: '工序名', rowspan: 2, align: 'left', width: 250, hidden: true },
               { field: '', title: '<span id="emptyTitle"></span>', colspan: 2, align: 'center', width: 0, hidden: false },//
               { field: 'strStartDate', title: '启动日期', rowspan: 2, align: 'center', width: 100, hidden: true },
               { field: 'StartDate', title: '启动日期', rowspan: 2, align: 'center', width: 100, hidden: true, formatter: function (val, row, index) { return DtToString(val) } }
           ],
           [
               { field: 'DemondQuantityFloor', title: '下限', align: 'center', width: 60 },
               { field: 'DemondQuantityCeiling', title: '上限', align: 'center', width: 60 },
               { field: 'NormalInStore', title: '正常', align: 'center', width: 70 },
               {
                   field: 'NormalStoreBtn', title: '', align: 'center', width: 30, formatter:
                     function (val, row, index) {
                         return '<button type="button" class="columnButton" onclick=NormalStoreDetail(' + row.id + ',"' + row.MaterialID + '")></button>';
                     }
               },
               { field: 'AbnormalInStore', title: '单配', align: 'center', width: 70 },
               { field: 'AbnormalStoreBtn', title: '', align: 'center', width: 30, formatter: function (val, row, index) { return '<button type="button" class="columnButton" onclick=AbnormalStoreDetail(' + row.id + ',"' + row.MaterialID + '")></button>' } },
               {//正常锁存text
                   field: 'NormalInLock', title: '正常', align: 'center', width: 50, editor: 'text', formatter: function (val, row, index) {
                       //var inHtml = '<input id="nmlLock' + row.id + '" type="text" value="' + val + '" onchange="NormalReserveWithoutSpec(' + row.id + ',this.id)" class="nmlLock readonly input" readonly="readonly" >';
                       if (row.MaterialSpecification != "" && row.MaterialSpecification != null) {
                           //有规格要求，不受上下步影响：一直为只读状态
                           return '<input id="nmlLock' + row.id + '" class="nmlLock readonly input" type="text" readonly="readonly" value="' + val + '" onchange="NormalReserveWithoutSpec(' + row.id + ',this.id)">';
                       } else {
                           return '<input id="nmlLock' + row.id + '" class="nmlLock lastStep input" type="text" value="' + val + '" onchange="NormalReserveWithoutSpec(' + row.id + ',this.id)">';
                       }

                   }
               },
               { field: 'AbnormalInLock', title: '单配', align: 'center', width: 50 },
               {//自产数量text
                   field: 'ProduceQuantity', title: '自加工', align: 'center', width: 50, editor: 'text', formatter: function (val, row, index) {
                       return '<input id="prdQtt' + row.id + '" class="prdqtt lastStep input" type="text" value="' + val + '" onchange="CommisonReserve(' + row.id + ',this.id)">';
                   }
               },
               {//外购数量text
                   field: 'PurchQuantity', title: '外购', align: 'center', width: 50, editor: 'text', formatter: function (val, row, index) {
                       return '<input id="pchQtt' + row.id + '" class="pchQtt lastStep input" type="text" value="' + val + '" onchange="CommisonReserve(' + row.id + ',this.id)">';
                   }
               },
               {//外协数量text
                   field: 'AssistQuantity', title: '外协', align: 'center', width: 50, editor: 'text', formatter: function (val, row, index) {
                       return '<input id="astQtt' + row.id + '" class="AstQtt lastStep input" type="text" value="' + val + '" onchange="CommisonReserve(' + row.id + ',this.id)">';
                   }
               },
               //-----------------
               { field: 'StandPreparationPeriod', title: '标准', align: 'center', width: 50, hidden: true },
               {//计划完成时间天数text
                   field: 'PreparationPeriod', title: '计划', align: 'center', width: 50, editor: 'text', formatter: function (val, row, index) {
                       return '<input id="ppdPrd' + row.id + '" class="ppdPrd nextStep input" type="text" value="' + val + '" onchange="PptDays(' + row.id + ',this.id)">';
                   },
                   hidden: true
               }
           ]
        ]
        return _columns;
    }

    //生成treegrid
    $(function () {
        $("#treegrid").treegrid({
            striped: true,
            idField: 'id',
            treeField: 'MaterialName',
            animate: true,
            showFooter: false,//是否显示页脚
            collapsible: false,
            url: "/Produce/ProductScheduling/GetDecompInf",
            queryParams: { "clientOrderID": "@ViewBag.clientOrderID", "orderDetail": "@ViewBag.orderDetail" },
            width: 1000,
            columns: createColumnForTreeGrid(),
            //格式化数据
            loadFilter: function (data, parentId) {
                return data;
            },
            onLoadSuccess: function (row, data) {
                mergeCellsForTree();
                if (isNextStep == true) {
                    endEdit();
                }
            }
        })

    });
</script>
<!--treegrid高层操作-->
<script>
    //关闭按钮
    var closeFun = function () {
        parent.closeTab();
    }
    //确认排产
    var scheduling = function () {
        if (isNextStep==false) {
            $.messager.alert("", "排产动作停留在上一步时，禁止此操作！");
            return false;
        }
        //1.数据检查
        if (BoolInfCheck() == false) { return false;}
        //2.关键数据保存=>保存成功:进行排产
        var matList = GetData();
        $.post("/Produce/ProductScheduling/UpdateCommission", { matDecomList: matList },
        function (data) {
            var sub_data = eval('(' + data + ')');
            if (sub_data.result == true) {
                $.post("/Produce/ProductScheduling/ConfirmSchedule", { clientOrderID: "@ViewBag.clientOrderID", clientOrderDetail: "@ViewBag.orderDetail", version: "" },
                    function (data) {
                        var sub_data = eval('(' + data + ')');
                        if (sub_data.result == true) {
                            return true;
                        } else {
                            $.messager.alert("", sub_data.exMsg);
                            return false;
                        }
                    });
                return true;
            } else {
                $.messager.alert("", sub_data.exMsg);
                return false;
            }
        });

    }

    //上一步、下一步按钮
    var showOrHideColumn = function () {
        var fileds = ["strProvideDate", "ProcessName", "StandPreparationPeriod", "PreparationPeriod", "strStartDate"];
        //查找按钮text来识别状态，暂未设置全局变量来控制
        //点击下一步
        if ($("#nextOrLastButton").val() == "下一步") {
            if (BoolInfCheck()==false) { return false; }
            isNextStep = true;
            //保存当前投料计划并reload数据
            SaveMatDecoms();
            dataRows = 0;
            $("#treegrid").treegrid("load");
            for (var index in fileds) {
                if (index <= 4) {
                    $("#treegrid").treegrid("showColumn", fileds[index]);
                };
            };
            $("#emptyTitle").text("备料工期");
            $("#nextOrLastButton").val("上一步");
            return false;
        };
        //点击上一步
        isNextStep = false;
        for (var index in fileds) {
            if (index <= 4) {
                $("#treegrid").treegrid("hideColumn", fileds[index]);
            };
        };
        //因为备料工期是无filed的表头，隐藏后无法用easyUi的方法显示，所以需要在这一步清空其text防止干扰
        $("#emptyTitle").text("");
        $("#nextOrLastButton").val("下一步");
        beginEdit();
    }

    //保存按钮
    var SaveMatDecoms = function () {
        var matList = GetData();
        $.post("/Produce/ProductScheduling/UpdateCommission", { matDecomList: matList },
        function (data) {
            var sub_data = eval('(' + data + ')');
            if (sub_data.result == true) {
                return true;
            } else {
                $.messager.alert("", sub_data.exMsg);
                return false;
            }
        });

    }


</script>
<!--子窗体功能集-->
<script>
    //dialog的退出
    var dlgCancel = function (dlgID) {
        $("#" + dlgID).dialog("close");
    }

    //A.1指定材料规格
    var specifySpecification = function (rowIndex, MaterialID) {
        //获取当前选中行元素
        getRowKeys(rowIndex);
        curMatID = MaterialID;
        $("#AttributeSelectDiv").dialog({
            title: "属性指定",
            cache: false,
            height: 240,
            href: "/Produce/ProductScheduling/ShowAttribute?MaterialID=" + MaterialID,
            modal: true,
            width: 330,
            //事件
            onClose: function () {
            }
        });
        $("#AttributeSelectDiv").dialog("open");
        $("#AttributeSelectDiv").dialog("move", { top: $.layerY });
    }

    //A.2属性提交
    var submitbtnAtt = function () {
        var strAtt = "";
        //var rows = $("#AttrTable").datagrid("getRows");
        for (i = 0; i < 2; i++) {
            var ed = $("#AttrTable").datagrid("getEditors", i);
            var str = $(ed[0].target).combobox("getText");
            if (str != "") {
                strAtt += str + ",";
            }
        }
        if (strAtt.length > 0) {
            strAtt = strAtt.substring(0, strAtt.length - 1);
        }
        //更新到数据库
        $.post("/Produce/ProductScheduling/UpdateSpecification", { ClientOrderID: curClientOrderID, ClientOrderDetail: curOrderDetail, ProductsPartsID: curMatID, Specifica: strAtt }, function (data) {
            var _data = eval('(' + data + ')');
            if (_data.result == true) {
                updateRow(curID, { MaterialSpecification: strAtt });
                $("#AttributeSelectDiv").dialog("close");
            } else {
                $.messager.alert("拒绝操作", _data.ExMsg);
            }
        })

    }

    //B.1查看正常库存明细
    var NormalStoreDetail = function (rowIndex, MaterialID) {
        getRowKeys(rowIndex);
        if (curSlcRow.MaterialSpecification == "" || curSlcRow.MaterialSpecification == null) {
            $.messager.alert("提示", "此物料无规格要求，不能锁存有规格型号的正常品！");
            return false;
        }
        //NormalStoreDiv
        $("#NormalStoreDiv").dialog({
            title: "正常库存",
            cache: false,
            height: 210,
            //主键+规格要求
            href: "/Produce/ProductScheduling/NormalInStore?ClientOrderID=" + curClientOrderID + "&&OrderDetail=" + curOrderDetail + "&&MaterialID=" + MaterialID + "&&Specification=" + curSpecification + "&&WarehouseID=" + curWhID,
            modal: true,
            width: 585,
            //事件
            onClose: function () {
            }
        });
        $("#NormalStoreDiv").dialog("open");
        $("#NormalStoreDiv").dialog("move", { top: $.layerY });
    }

    //B.2正常有规格锁存信息提交
    var submitbtnNormalStore = function () {
        //var Ndata = ($("#NormalStoreTable").datagrid("getData")).rows;
        var totLoced = 0;//锁存总数量
        var submitResult = "";//提示锁存结果
        // getChecked 所有checked行，没有check中的行不做任何考虑
        var ckedRows = $("#NormalStoreTable").datagrid("getChecked");
        //没有选中行
        if (ckedRows.length == 0) {
            return;
        }
        //生成提交数据集
        var reserveRows = [];
        for (var i = 0; i < ckedRows.length; i++) {
            //过滤未修改数量的行
            var rowIndex = $("#NormalStoreTable").datagrid("getRowIndex", ckedRows[i]);
            var editors = $("#NormalStoreTable").datagrid("getEditors", rowIndex);
            if (ckedRows[i].OrderQuantity == $(editors[0].target).val()) {
                ////结束编辑
                //$("#NormalStoreTable").datagrid("endEdit", rowIndex);
                continue;
            } else {
                var row = {};
                row["OriginFlag"] = ckedRows[i].OriginFlag;
                row["WhID"] = ckedRows[i].WhID;
                row["ClientOrderID"] = curClientOrderID;//ckedRows[i].ClientOrderID;
                row["OrderDetail"] = curOrderDetail;//ckedRows[i].OrderDetail;
                row["ProductID"] = curProductID;//ckedRows[i].ProductID;
                row["MaterialID"] = ckedRows[i].MaterialID;
                row["BthID"] = ckedRows[i].BthID;
                row["TotAvailable"] = ckedRows[i].TotAvailable;
                row["Specification"] = ckedRows[i].Specification;
                row["OrderQuantity"] = $(editors[0].target).val();
                reserveRows.push(row);
            }
        }
        if (reserveRows.length == 0) {
            $.messager.alert("提示", "没有可修改的数据！");
            $("#NormalStoreDiv").dialog("close");
        } else {
            $.post("/Produce/ProductScheduling/LockNormalBatch", { dicList: reserveRows },
               function (data) {
                   var _data = eval('(' + data + ')');
                   //更新成功后，刷新受影响的行
                   if (_data.Result == true) {
                       var cldIDs = [];//要更新的行
                       //计算影需要刷新的目标行id
                       cldIDs = GetChildIds(curID, curSlcRow._parentId);
                       $.post("/Produce/ProductScheduling/GetSpeciaDcmInf", {
                           ids: cldIDs,
                           clientOrderID: curClientOrderID,
                           orderDetail: curOrderDetail
                       },
                       function (data) {
                           var sub_data = eval('(' + data + ')');
                           if (sub_data.oprResult == true) {
                               updateRows(sub_data.rows);
                           } else {//刷新失败
                               $.messager.alert("", sub_data.exMsg);
                           }
                       });                       
                       $("#NormalStoreDiv").dialog("close");
                       //alert("锁存成功");
                   } else {
                       submitResult = submitResult + _data.ExMsg;
                       $.messager.alert("", _data.ExMsg);
                   }
               })
        }//else
    }

    //C.1查看让步品库存明细
    var AbnormalStoreDetail = function (rowIndex, MaterialID) {
        getRowKeys(rowIndex);
        $("#AbnormalStoreDiv").dialog({
            title: "单配库存",
            cache: false,
            height: 210,
            href: "/Produce/ProductScheduling/AbnormalInStore?ClientOrderID=" + curClientOrderID + "&&OrderDetail=" + curOrderDetail + "&&MaterialID=" + MaterialID + "&&Specification=" + curSpecification + "&&WarehouseID=" + curWhID,
            modal: true,
            width: 645,
            //事件
            onClose: function () {
            }
        });
        $("#AbnormalStoreDiv").dialog("open");
        $("#AbnormalStoreDiv").dialog("move", { top: $.layerY });
    }

    //C.2让步锁存信息提交
    var submitbtnAbnormalStore = function () {
        var totLoced = 0;//锁存总数量
        var submitResult = "";//提示锁存结果
        // getChecked 所有checked行，没有check中的行不做任何考虑
        var ckedRows = $("#AbnormalStoreTable").datagrid("getChecked");
        //没有选中行
        if (ckedRows.length == 0) {
            return;
        }
        //生成提交数据集
        var reserveRows = [];
        for (var i = 0; i < ckedRows.length; i++) {
            //过滤未修改数量的行
            var rowIndex = $("#AbnormalStoreTable").datagrid("getRowIndex", ckedRows[i]);
            var editors = $("#AbnormalStoreTable").datagrid("getEditors", rowIndex);
            if (ckedRows[i].OrderQuantity == $(editors[0].target).val()) {
                ////结束编辑
                //$("#NormalStoreTable").datagrid("endEdit", rowIndex);
                continue;
            } else {
                var row = {};
                row["OriginFlag"] = ckedRows[i].OriginFlag;
                row["WhID"] = ckedRows[i].WhID;
                row["ClientOrderID"] = curClientOrderID;//ckedRows[i].ClientOrderID;
                row["OrderDetail"] = curOrderDetail;//ckedRows[i].OrderDetail;
                row["ProductID"] = curProductID;//ckedRows[i].ProductID;
                row["MaterialID"] = ckedRows[i].MaterialID;
                row["BthID"] = ckedRows[i].BthID;
                row["TotAvailable"] = ckedRows[i].TotAvailable;
                row["Specification"] = ckedRows[i].Specification;
                row["OrderQuantity"] = $(editors[0].target).val();
                row["GiveinCatID"] = ckedRows[i].GiveinCatID;
                reserveRows.push(row);
            }
        }
        if (reserveRows.length == 0) {
            $.messager.alert("提示", "没有可修改的数据！");
            $("#AbnormalStoreDiv").dialog("close");
        } else {
            $.post("/Produce/ProductScheduling/LockAbnormalBatch", { dicList: reserveRows },
               function (data) {
                   var _data = eval('(' + data + ')');
                   if (_data.Result == true) {
                       //更新成功后，刷新受影响的行
                       var cldIDs = [];//要更新的行
                       //计算影需要刷新的目标行id
                       cldIDs = GetChildIds(curID, curSlcRow._parentId);
                       $.post("/Produce/ProductScheduling/GetSpeciaDcmInf", {
                           ids: cldIDs,
                           clientOrderID: curClientOrderID,
                           orderDetail: curOrderDetail
                       },
                       function (data) {
                           var sub_data = eval('(' + data + ')');
                           if (sub_data.oprResult == true) {
                               updateRows(sub_data.rows);
                           } else {//刷新失败
                               $.messager.alert("", sub_data.exMsg);
                           }
                       });
                       $("#AbnormalStoreDiv").dialog("close");
                       //alert("锁存成功");
                   } else {
                       submitResult = submitResult + _data.ExMsg;
                       $.messager.alert("", _data.ExMsg);
                   }
               })
        }//else
    }

    //D.正常预约：无规格正品锁存
    var NormalReserveWithoutSpec = function (rowIndex, id) {
        getRowKeys(rowIndex);//获取当前行信息
        if (curSlcRow.ProduceQuantity + curSlcRow.PurchQuantity + curSlcRow.AssistQuantity + parseFloat($("#" + id).val()) > curSlcRow.DemondQuantityCeiling) {
            $.messager.alert("拒绝操作", "锁存与投料合计大于需要量上限！");
            reloadRow(rowIndex);
            return false;
        } else {
            var cldIDs = [];//要更新的行
            $.post("/Produce/ProductScheduling/NormalReserveWithoutSpec", {
                WhID: curWhID,
                ClientOrderID: curClientOrderID,
                OrderDetail: curOrderDetail,
                ProductID: curProductID,
                MaterialID: curMatID,
                Specification: curSpecification,
                TotAvailable: curSlcRow.NormalInStore,//正常库存量
                OrderQuantity: $("#" + id).val()
            },
           function (data) {
               var _data = eval('(' + data + ')');
               //锁存成功:刷新界面
               if (_data.result == true) {
                   //计算影需要刷新的目标行id
                   cldIDs = GetChildIds(rowIndex, curSlcRow._parentId);
                   $.post("/Produce/ProductScheduling/GetSpeciaDcmInf", {
                       ids: cldIDs,
                       clientOrderID: curClientOrderID,
                       orderDetail: curOrderDetail
                   },
                   function (data) {
                       var sub_data = eval('(' + data + ')');
                       if (sub_data.oprResult == true) {
                           updateRows(sub_data.rows);
                       } else {//刷新失败
                           $.messager.alert("", sub_data.exMsg);
                       }
                   });
               } else {//锁存失败
                   reloadRow(rowIndex);
                   $.messager.alert("", _data.ExMsg);
                   return false;
               }
           });
        }
    }
</script>

<!--buttons-->
<div class="buttons" style="width:100%;text-align:right;">
    <span style="width:100px;">
        @UserHelpers.ButtonForProductionRelease("schedulingRelease()", "btnRelieveSchedule")
        @UserHelpers.ButtonForConfirmedProduction("scheduling()","btnCorfirmeSchedule")
        @UserHelpers.ButtonForClose("closeFun()")
       @* <a class="easyui-linkbutton" iconCls='icon-add' onclick='capacityAnalyze();'>产能分析</a>
        <a class="easyui-linkbutton" iconCls='icon-add' onclick='ganttChat();'>查看甘特图</a>*@
       @* <a class="easyui-linkbutton" iconCls='icon-undo' onclick='schedulingDisenable();'>排产解除</a>*@       
       @* <a class="easyui-linkbutton" iconCls='icon-add' onclick='schedulingEnable();'>确认排产</a>*@        
       @* <a class="easyui-linkbutton" iconCls='icon-print' onclick='printFun();'>打印</a>*@
       @* <a href='javascript:void(0);' class='easyui-linkbutton' iconCls='icon-cancel' onclick='closeFun();'>关闭</a>*@
        
    </span>
</div>
@UserHelpers.Line()
@UserHelpers.Title("订单产品排产")

<div style="width:100%;text-align:center;">
    <div style="width:87%;margin:auto;text-align:right;">
        <form id="processForm">
            <div>
                @UserHelpers.ButtonForNextStep("showOrHideColumn()","nextOrLastButton")
                @UserHelpers.ButtonForSave("SaveMatDecoms()")
            </div>
        </form>
    </div>
</div>
<div id="schedulingTreegrid" style="width:100%;height:350px; text-align:center;" class="datagrid">
   <table id="treegrid" class="easyui-treegrid"/>
</div>
<!--AttributeSelectDialog-->
<div class="easyui-dialog" id="AttributeSelectDiv" closed="true" data-options="buttons:'#buttonAtt',modal:true"></div>
<div id="buttonAtt">
    <a id="submitbtnAtt" class="easyui-linkbutton" onclick="submitbtnAtt()">确定</a>
    <a href="#" class="easyui-linkbutton" onclick="dlgCancel('AttributeSelectDiv')">取消</a>
</div>
<!--NormalLockDialog-->
<div class="easyui-dialog" id="NormalStoreDiv" closed="true" data-options="buttons:'#buttonNormal',modal:true"></div>
<div id="buttonNormal">
    <a id="submitbtnNormal" href="#" class="easyui-linkbutton" onclick="submitbtnNormalStore()">确定</a>
    <a href="#" class="easyui-linkbutton" onclick="dlgCancel('NormalStoreDiv')">取消</a>
</div>
<!--AbnormalLockDialog-->
<div class="easyui-dialog" id="AbnormalStoreDiv" closed="true" data-options="buttons:'#buttonAbnormal',modal:true"></div>
<div id="buttonAbnormal">
    <a id="submitbtnAbnormal" href="#" class="easyui-linkbutton" onclick="submitbtnAbnormalStore()">确定</a>
    <a href="#" class="easyui-linkbutton" onclick="dlgCancel('AbnormalStoreDiv')">取消</a>
</div>
